from django.contrib.auth.models import User, Group
from rest_framework import viewsets, status, mixins, generics
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.permissions import IsAdminUser
from rest_framework.renderers import TemplateHTMLRenderer
from django.views import generic
from repo.models import DesignTeam, Vehicle, Address, Customer, Target, Warehouse, Scenario, Waypoint, Path, Plan, DataLog
from repo.models import VehicleDemo, ScenarioDemo, OpsPlanDemo, PlayDemo
from repo.serializers import UserSerializer, TeamSerializer, VehicleSerializer, AddressSerializer, CustomerSerializer, TargetSerializer, WarehouseSerializer
from repo.serializers import ScenarioSerializer, WaypointSerializer, PathSerializer, PlanSerializer, DataLogSerializer, DataLogTeamSerializer
from repo.serializers import VDSerializer, SDSerializer, OPDSerializer, PDSerializer
from django.http import Http404


class UserViewSet(viewsets.ModelViewSet):
    """
    API endpoint that allows users to be viewd or edited.
    """
    queryset = User.objects.all().order_by('date_joined')
    serializer_class = UserSerializer

class TeamList(generics.ListAPIView):
    """
    List all team entries, or create a new team entry.
    """
    queryset = DesignTeam.objects.all()
    serializer_class = TeamSerializer

class VehicleList(generics.ListCreateAPIView):
    """
    List all vehicle entries, or create a new vehicle entry.
    """
    queryset = Vehicle.objects.all()
    serializer_class = VehicleSerializer

class VehicleTeamList(generics.ListCreateAPIView):
    """
    List all vehicle entries, or create a new vehicle entry.
    """
    serializer_class = VehicleSerializer
    def get_queryset(self):
        team = self.request.user.username.split('_')[0]
        return Vehicle.objects.filter(team=team)

class VehicleDetail(generics.RetrieveUpdateDestroyAPIView):
    """
    Retrieve, update, or delete a vehicle entry.
    """
    queryset = Vehicle.objects.all()
    serializer_class = VehicleSerializer

class AddressList(generics.ListCreateAPIView):
    """
    List all address entries or create a new address entry
    """
    queryset = Address.objects.all()
    serializer_class = AddressSerializer

class AddressDetail(generics.RetrieveUpdateDestroyAPIView):
    """
    Retreive, Update, Delete an address entry.
    """
    queryset = Address.objects.all()
    serializer_class = AddressSerializer

class CustomerList(generics.ListCreateAPIView):
    """
    List all customer entries or create a new customer entry
    """
    queryset = Customer.objects.all()
    serializer_class = CustomerSerializer

class CustomerDetail(generics.RetrieveUpdateDestroyAPIView):
    """
    Retreive, Update, Delete a customer entry.
    """
    queryset = Customer.objects.all()
    serializer_class = CustomerSerializer

class CustomerEventList(generics.ListCreateAPIView):
    """
    List all customer entries or create a new customer entry
    """

    serializer_class = CustomerSerializer

    def get_queryset(self):
        event = self.kwargs['event']
        return Customer.objects.filter(event=event)

class TargetList(generics.ListCreateAPIView):
    """
    List all target entries or create a new target entry
    """
    queryset = Target.objects.all()
    serializer_class = TargetSerializer

class TargetDetail(generics.RetrieveUpdateDestroyAPIView):
    """
    Retreive, Update, Delete a target entry.
    """
    queryset = Target.objects.all()
    serializer_class = TargetSerializer

class TargetTeamList(generics.ListCreateAPIView):
    """
    List all target entries, or create a new vehicle entry.
    """
    serializer_class = TargetSerializer
    def get_queryset(self):
        team = self.request.user.username.split('_')[0]
        return Target.objects.filter(team=team)

class WarehouseList(generics.ListCreateAPIView):
    """
    List all warehosue entries or create a new warehouse entry
    """
    queryset = Warehouse.objects.all()
    serializer_class = WarehouseSerializer

class WarehouseDetail(generics.RetrieveUpdateDestroyAPIView):
    """
    Retreive, Update, Delete a warehouse entry.
    """
    queryset = Warehouse.objects.all()
    serializer_class = WarehouseSerializer

class WarehouseTeamList(generics.ListCreateAPIView):
    """
    List all target entries, or create a new vehicle entry.
    """
    serializer_class = WarehouseSerializer
    def get_queryset(self):
        team = self.request.user.username.split('_')[0]
        return Warehouse.objects.filter(team=team)

class ScenarioList(generics.ListCreateAPIView):
    """
    List all scenario entries or create a new scenario entry
    """
    queryset = Scenario.objects.all()
    serializer_class = ScenarioSerializer

class ScenarioDetail(generics.RetrieveUpdateDestroyAPIView):
    """
    Retreive, Update, Delete a scenario entry.
    """
    queryset = Scenario.objects.all()
    serializer_class = ScenarioSerializer

class Scenario(generics.GenericAPIView):
    """
    Get or Put a Scenario entry for a user's team/group.
    """
    def get_object(self):
        return Scenario.objects.all().first()
    def get

class ScenarioTeamList(generics.ListCreateAPIView):
    """
    List all scenario entries, or create a new scenario entry.
    """
    serializer_class = ScenarioSerializer
    def get_queryset(self):
        event = self.kwargs['team']
        return Scenario.objects.filter(team=team)

class WaypointList(generics.ListCreateAPIView):
    """
    List all waypoint entries or create a new waypoint entry
    """
    queryset = Waypoint.objects.all()
    serializer_class = WaypointSerializer

class WaypointDetail(generics.RetrieveUpdateDestroyAPIView):
    """
    Retreive, Update, Delete a waypoint entry.
    """
    queryset = Waypoint.objects.all()
    serializer_class = WaypointSerializer

class WaypointTeamList(generics.ListCreateAPIView):
    """
    List all waypoint entries, or create a new waypoint entry.
    """
    serializer_class = WaypointSerializer
    def get_queryset(self):
        team = self.request.user.username.split('_')[0]
        return Waypoint.objects.filter(team=team)

class PathList(generics.ListCreateAPIView):
    """
    List all path entries or create a new path entry
    """
    queryset = Path.objects.all()
    serializer_class = PathSerializer

class PathDetail(generics.RetrieveUpdateDestroyAPIView):
    """
    Retreive, Update, Delete a path entry.
    """
    queryset = Path.objects.all()
    serializer_class = PathSerializer

class PathTeamList(generics.ListCreateAPIView):
    """
    List all path entries, or create a new path entry.
    """
    serializer_class = PathSerializer
    def get_queryset(self):
        team = self.request.user.username.split('_')[0]
        return Path.objects.filter(team=team)

class PlanList(generics.ListCreateAPIView):
    """
    List all plan entries or create a new plan entry
    """
    queryset = Plan.objects.all()
    serializer_class = PlanSerializer

class PlanDetail(generics.RetrieveUpdateDestroyAPIView):
    """
    Retreive, Update, Delete a plan entry.
    """
    queryset = Plan.objects.all()
    serializer_class = PlanSerializer

class PlanTeamList(generics.ListCreateAPIView):
    """
    List all path entries, or create a new path entry.
    """
    serializer_class = PlanSerializer
    def get_queryset(self):
        team = self.request.user.username.split('_')[0]
        return Plan.objects.filter(team=team)

class DataLogList(generics.ListCreateAPIView):
    """
    List all DataLog entries or create a new DataLog Entry
    """
    queryset = DataLog.objects.all()
    serializer_class = DataLogSerializer

class DataLogDetail(generics.RetrieveUpdateDestroyAPIView):
    """
    Retreive, Update, Delete a DataLog Entry
    """
    queryset = DataLog.objects.all()
    serializer_class = DataLogSerializer

class DataLogListView(generic.ListView):
    model = DataLog
    
    def get_queryset(self):
        if self.request.user.is_staff is True:
            team = self.request.get('team','')
        else:
            team = self.request.user.username.split('_')[0]
        return DataLog.objects.filter(team=team).order_by('time')
    
    def get_context_data(self, **kwargs):
        context = super(DataLogListView, self).get_context_data(**kwargs)
        if self.request.user.is_staff:
            team = self.request.get('team', '')
        else:
            team = self.request.user.username.split('_')[0]
        context['team'] = team
        return context

    
    template_name = 'repo/datalog_list.html'

class DLListView(generics.ListAPIView):
    # queryset = DataLog.objects.all()
    renderer_classes = [TemplateHTMLRenderer]
    template_name = 'repo/datalog_list.html'
    serializer_class = DataLogSerializer

    def get_queryset(self):
        if self.request.user.is_staff:
            team = self.request.query_params.get('team', '')
        else:
            team = self.request.user.username.split('_')[0]
        return DataLog.objects.filter(team=team).order_by('time')

    # For some reason this is completely ignored
    # def get_serializer_context(self):
    #    context = super().get_serializer_context()
    #    if self.request.user.is_staff:
    #        team = self.request.get('team', '')
    #    else:
    #        team = self.request.user.username.split('_')[0]
    #    context['team']= 'arl'
    #    return {
    #        'request': self.request,
    #        'format': self.format_kwarg,
    #        'view': self,
    #        'team': 'arl'
    #    }
      


class DLAdminView(generics.ListAPIView):
    queryset = DataLog.objects.distinct("team").all()
    serializer_class = DataLogTeamSerializer
    permission_classes = [IsAdminUser]
    renderer_classes = [TemplateHTMLRenderer]
    template_name = 'repo/datalog_admin.html'


class VDList(generics.ListCreateAPIView):
    """
    List all target entries or create a new target entry
    """
    queryset = VehicleDemo.objects.all()
    serializer_class = VDSerializer

class VDDetail(generics.RetrieveUpdateDestroyAPIView):
    """
    Retreive, Update, Delete a target entry.
    """
    queryset = VehicleDemo.objects.all()
    serializer_class = VDSerializer

class SDList(generics.ListCreateAPIView):
    """
    List all target entries or create a new target entry
    """
    queryset = ScenarioDemo.objects.all()
    serializer_class = SDSerializer

class SDDetail(generics.RetrieveUpdateDestroyAPIView):
    """
    Retreive, Update, Delete a target entry.
    """
    queryset = ScenarioDemo.objects.all()
    serializer_class = SDSerializer

class OPDList(generics.ListCreateAPIView):
    """
    List all target entries or create a new target entry
    """
    queryset = OpsPlanDemo.objects.all()
    serializer_class = OPDSerializer

class OPDDetail(generics.RetrieveUpdateDestroyAPIView):
    """
    Retreive, Update, Delete a target entry.
    """
    queryset = OpsPlanDemo.objects.all()
    serializer_class = OPDSerializer

class PDList(generics.ListCreateAPIView):
    """
    List all target entries or create a new target entry
    """
    queryset = PlayDemo.objects.all()
    serializer_class = PDSerializer

class PDDetail(generics.RetrieveUpdateDestroyAPIView):
    """
    Retreive, Update, Delete a target entry.
    """
    queryset = PlayDemo.objects.all()
    serializer_class = PDSerializer
